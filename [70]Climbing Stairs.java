class Solution {
    public int climbStairs(int n) {
        //初始化动态数组
        int[] dp = new int[n+1];
        //默认起点步数为1 (斐波那契数列)
        dp[0] = 1;
        //到达第一层的方法为1种
        dp[1] = 1;

        //从第二层开始运行
        for(int i=2;i<n+1;i++){
            /*
            索引i的值代表的是第 i 层楼梯, 不同的方法数量是 dp[i]
            (每次只能选择1步或者两步, 所以只能从第三层跨两步,或者第四层跨1步,来达到第五层)
            例如到达第 5 层的可行方法数量 为到第四层的可行方法数量 + 第三层的可行方法数
            */
            dp[i] = dp[i-1] + dp[i-2];
        }

        //返回数组的最后一位数
        return dp[dp.length-1];
    }
}